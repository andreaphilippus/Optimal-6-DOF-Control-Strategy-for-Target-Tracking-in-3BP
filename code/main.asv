%% Project

clear all
close all
clc

addpath('\casadi-windows-matlabR2016a-v3.5.5');
import casadi.*

%% System Constants

Var.m1 = 398600.4328969393;                     % Gravitational parameter of Earth
Var.m2 = 4902.800582147765;                     % Gravitational parameter of Moon
Var.rEL = 384400;                               % Distance between Earth and Moon, nondim

Var.lstar = 385692.5;                           % Characteristic length, km
Var.tstar = 377084.1526670386;                  % Characteristic time, s
Var.vstar = Var.lstar / Var.tstar;              % Characteristic velocity, km/s
Var.mstar = Var.m1 + Var.m2;                    % Characteristic mass, kg

Var.mu = Var.m2 / Var.mstar;                    % CR3BP Gravitational parameter, nondim
mu = Var.mu;

Var.L2x = L2LagrangePoint(Var.mu);              % L2 Lagrange Point (x)

%% S/C Parameter

Var.J = [67946 -82 11129; ...
    -83 90061 103; ...
    11129 103 45821] / ((Var.lstar/1000)^2 * Var.mstar);    % Moment of Inertia (nondim)

Var.m = 6200 / (Var.mstar);                                 % Spacecraft mass (nondim)

Var.I = [Var.J zeros(3); zeros(3) Var.m*eye(3)];

%% Visual

Var.vecSize = 5000;                             % Attitude representation vector length, km

%% Propagation

Var.NumOrb = 1;                                 % Number of Orbits to Propagate
Var.tol = 1e-12;                                % Integration Tolerance
opt = odeset('Reltol', Var.tol,'Abstol', Var.tol);

%% MPC Setting

Var.N = 8;                                      % Number of prediction window step
N = Var.N;

Q = 10000;                                      % Weighing Scalar for state
R = diag([1,1,1,10,10,10]);                     % Weighing matrix for control input

%% CasADi Variable Introduction

g = MX.sym('g', 4,4);                           % CasADi Symbolic SE(3) pose
v = MX.sym('v', 6,1);                           % CasADi Symbolic velocity
u = MX.sym('u', 6,1);                           % CasADi Symbolic control input

G = MX.sym('G', 4,4, N+1);                     % State history "over" prediction window
V = MX.sym('V', 6, N+1);                        % Velocity history "over" prediction window
U = MX.sym('U', 6, N);                          % Control history "over" prediction window

P = MX.sym('P', 4,4,2);                  % State parameter vector, including the initial and the reference state of the s/c
D = MX.sym('D', 12);                    % Velocity parameter vector, "

%% CasADi Dynamics

[SB, r] = invSE3(g);                % Synodic Frame
w = v(1:3);                         % Angular velocity in S frame
nu = v(4:6);                        % Translational velocity in S frame

wS = [0 0 1]';                      % Angular velocity of Synodic frame relative to N frame

IS = SB*Var.J*SB';                  % Moment of Inertia Matrix in S frame

r13 = r - [-mu 0 0]';
r23 = r - [1-mu 0 0]';

tauS = 3*((1-mu)/norm(r13)^5 * CrossProd(r13)*IS*r13 + mu/norm(23)^5 * CrossProd(r23)*IS*r23);
fS = -Var.m*((1-mu)/norm(r13)^3 * r13 + mu/norm(r23)^3 * r23);

wdot = -CrossProd(wS)*w - IS\CrossProd(w)*IS*w + IS\tauS;
nudot = -2*CrossProd(wS)*nu - CrossProd(wS)^2 * r + 1/Var.m*fS;

gdot = [-CrossProd(w)*SB, nu; 0 0 0 0];
vdot = [wdot; nudot] + u;

f = Function('f', {g, v, u},{gdot, vdot});     % Nonlinear Mapping Function

%% CasADi RK4 Integration
G(:,:,1) = P(:,:,1);      % Initial state
V(:,1) = D(:,1);        % Initial velocity
for k = 1:N
    state = G(:,:,k); vel = V(:,k); con = U(:,k);
    [f_gdot, f_vdot] = f()

end

%% Reference State/Velocity History Introduction



